# -*- coding: utf-8 -*-
"""Feature_Extraction_With_Python.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1J2tJFzouWVdFqUIvC6bkzHyH8JOdlaYh
"""

try:
    import requests
except:
    print("If you read this message, it means you need to install the package requests by using pip3 install requests --user")
import numpy as np
import json
import matplotlib.pyplot as plt
from IPython.display import Audio as play_wave
import getpass

"""# Please copy-paste your token here!
# Get a token from Spotify
Nowadays Spotify web APIs only work with an authorization, which means, to have an available token. You can get a simple token by visiting the page [here](https://developer.spotify.com/console/get-audio-features-several-tracks/).
Click on "Get Token", login to Spotify, copy-paste the resulting string in the cell below and execute it.
"""

token = getpass.getpass("Please copy-paste your token here!\n")
# Temporarily the OAuth token is written manually
# Then it will be retrieved from the user's device
headers = {"Authorization": "Bearer %s"%token}

"""# Search with spotify
Now, let's first look the Spotify's API regarding the simple search. The documentation page is [here](https://developer.spotify.com/console/get-search-item/). We see we need to specify a parameter named "q" with the query string, and one named "type" specify either "track" or "artist".
So, let's start with the best song ever, i.e., "I love it" by Icona Pop.
"""

urlPlaylists = "https://api.spotify.com/v1/me/playlists"
req = requests.get(headers = headers, url = urlPlaylists)
assert req.status_code == 200, req.content
answer = req.json()

playlistLinks = []

for playlist in answer['items']:
  tracks = playlist['tracks']
  if tracks['total'] > 0: # exclusion of empty playlists
    playlistLinks.append(tracks['href']) # already unique links

trackIds = []

params = { 'fields': 'items(track(id))' }
for playlistLink in playlistLinks:
  req = requests.get(headers = headers, url = playlistLink, params = params)
  assert req.status_code == 200, req.content
  for track in req.json()['items']:
    trackIds.append(track['track']['id'])

trackIds = np.unique(trackIds)
trackIdsStr = np.array2string(trackIds, separator = ',').translate({ord(i): None for i in "[] '\n"})
print(trackIdsStr)

urlFeats = 'https://api.spotify.com/v1/audio-features'

params = { 'ids': trackIdsStr }
req = requests.get(headers = headers, url = urlFeats, params = params)
assert req.status_code == 200, req.content

trackDescriptions = req.json()['audio_features']
for track in trackDescriptions:
  print(track)

"""As you can see, Spotify returns A LOT of information, including a freely-downloadable 30-second preview url (be careful, Spotify knows who you are), and the ID. The ID is extremly important to get further information, especially the audio features!

# Audio Features
One of the sexiest Spotify's APIs is the possibility to download automatically computed high-level audio features.

While we don't know how they were computed, we know what they mean and we can trust spotify on their quality. The APIs are documented [here](https://developer.spotify.com/console/get-audio-features-several-tracks/).

Let's now get some information on Icona Pop, since we know the id_
"""

modes=["minor", "major"]
key_tonal=["C","C#", "D","D#","E","F","F#","G","G#","A","A#","B"]

"""Before analyzing it with Spotify, let's try to make an educated guess, with respect to the preview URL. 

So, how much are these values?

Use the description [here](https://developer.spotify.com/documentation/web-api/reference/object-model/#audio-features-object)
- tempo (BPM)
- key and mode (any listener with perfect pitch?)
- danceability (how suitable a track is for dancing?) 0.3
- energy  (perceptual measure of intensity and activity) 0.35
- speechiness (presence of spoken words in a track) 0.05
- acousticness (whether the track iacoustic)    .4
- liveness ( presence of an audience in the recording) 
- instrumentalness (whether a track contains no vocals)
- valence (the musical positiveness conveyed by a track)
"""

url="https://api.spotify.com/v1/audio-features"
params={"ids":first_result["id"]}
req=requests.get(url=url, params=params, headers=headers)
audio_features=req.json()["audio_features"][0]
#print(audio_features)
#print("The song has a duration of %.3f seconds, with %d BPM, and it is in %s %s"
#      %(audio_features["duration_ms"]/1000, audio_features["tempo"], 
#          key_tonal[audio_features["key"]], modes[audio_features["mode"]]))
for feature in ["danceability", "energy", "speechiness", 
                "acousticness","liveness","instrumentalness","valence"]:
    print("The %s of the song is %.1f %%"%(feature, 100*audio_features[feature]))

"""# Audio Analysis
We can get the audio analysis, which is a more complete analysis that includes even single beats and chords.

Audio Analysis is documented [here](https://developer.spotify.com/console/get-audio-analysis-track/)

For example, let's track the beat instants during the song
"""

audio_analysis_url=audio_features["analysis_url"]
req=requests.get(url=audio_analysis_url, headers=headers)
#audio_features=req.json()["audio_features"][0]
#print(req.json())
beats=req.json()["beats"]

t=np.arange(0,audio_features["duration_ms"]/1000,0.01)
beat_array=np.zeros(t.shape)
for b in beats:
    beat_array[np.argmin(np.abs(t-b["start"]))]=1
plt.figure(figsize=(16,6))
plt.plot(t, beat_array)
plt.xlim([0,3])
plt.show()

beats

